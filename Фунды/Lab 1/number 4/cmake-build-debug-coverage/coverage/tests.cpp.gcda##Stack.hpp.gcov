        -:    0:Source:/mnt/d/Уник/4 сем/Фунды/number 4/include/Stack.hpp
        -:    0:Graph:/mnt/d/Уник/4 сем/Фунды/number 4/cmake-build-debug-coverage/CMakeFiles/tests.dir/tests/tests.cpp.gcno
        -:    0:Data:/mnt/d/Уник/4 сем/Фунды/number 4/cmake-build-debug-coverage/CMakeFiles/tests.dir/tests/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef NUMBER_4_STACK_H
        -:    2:#define NUMBER_4_STACK_H
        -:    3:
        -:    4:#include "Deque.hpp"
        -:    5:
        -:    6:template <typename T>
        -:    7:class Stack{
        -:    8:private:
        -:    9:    my_container::Deque<T> data;
        -:   10:public:
function _ZN5StackIiEC2Ev called 4 returned 100% blocks executed 100%
        4:   11:    Stack() noexcept : data(my_container::Deque<T>()) {};
        4:   11-block  0
call    0 returned 4
function _ZN5StackIiEC2ERKS0_ called 1 returned 100% blocks executed 100%
        1:   12:    Stack(const Stack<T>& other) noexcept : data(my_container::Deque<T>(other.data)) {};
        1:   12-block  0
call    0 returned 1
function _ZN5StackIiEC2EOS0_ called 2 returned 100% blocks executed 100%
        2:   13:    Stack(Stack<T> &&other) noexcept : data{std::move(other.data)} {};
        2:   13-block  0
call    0 returned 2
call    1 returned 2
function _ZN5StackIiEC2ERKSt16initializer_listIiE called 9 returned 100% blocks executed 100%
        9:   14:    Stack(const std::initializer_list<T> &List) noexcept : data(my_container::Deque<T>(List)) {};
        9:   14-block  0
call    0 returned 9
        -:   15:
function _ZN5StackIiEaSERKS0_ called 1 returned 100% blocks executed 100%
        1:   16:    Stack<T>& operator=(const Stack<T> &other) {
        1:   17:        if (*this != other) {
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   18:            data = other.data;
        1:   18-block  0
call    0 returned 1
        -:   19:        }
        1:   20:        return *this;
        1:   20-block  0
        -:   21:    }
        -:   22:
function _ZN5StackIiEaSEOS0_ called 1 returned 100% blocks executed 100%
        1:   23:    Stack<T> & operator=(Stack<T> &&other) noexcept {
        1:   24:        if (*this != other)  {
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   25:            data = std::move(other.data);
        1:   25-block  0
call    0 returned 1
call    1 returned 1
        -:   26:        }
        1:   27:        return *this;
        1:   27-block  0
        -:   28:    }
        -:   29:
function _ZN5StackIiE3topEv called 9 returned 100% blocks executed 100%
        9:   30:    T& top() {return data[0];}
        9:   30-block  0
call    0 returned 9
        -:   31:    const T& top() const {return data[0];}
        -:   32:
function _ZNK5StackIiE5emptyEv called 7 returned 100% blocks executed 100%
        7:   33:    [[nodiscard]] bool empty() const noexcept {return data.empty();};
        7:   33-block  0
call    0 returned 7
function _ZNK5StackIiE4sizeEv called 7 returned 100% blocks executed 100%
        7:   34:    [[nodiscard]] size_t size() const noexcept {return data.size();};
        7:   34-block  0
call    0 returned 7
        -:   35:
        -:   36:    void push(const T& object) noexcept {data.insert(data.begin(), object);};
function _ZN5StackIiE4pushEOi called 2 returned 100% blocks executed 100%
        2:   37:    void push(T&& object) noexcept {data.insert(data.begin(), object);};
        2:   37-block  0
call    0 returned 2
call    1 returned 2
        -:   38:
function _ZN5StackIiE3popEv called 6 returned 83% blocks executed 89%
        6:   39:    void pop() {
        6:   40:        if (data.empty()) {
        6:   40-block  0
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        1:   41:            throw std::out_of_range("Stack is empty");
        1:   41-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   41-block  1
call    4 returned 0
    $$$$$:   41-block  2
call    5 never executed
        -:   42:        }
        5:   43:        data.pop_front();
        5:   43-block  0
call    0 returned 5
        5:   44:    }
        -:   45:
function _ZN5StackIiE4swapERS0_ called 1 returned 100% blocks executed 100%
        1:   46:    void swap(Stack<T>& other) {
        1:   47:        data.swap(other.data);
        1:   47-block  0
call    0 returned 1
        1:   48:    }
        -:   49:
function _ZNK5StackIiEeqERKS0_ called 3 returned 100% blocks executed 100%
        3:   50:    bool operator== (const Stack<T>&other) const noexcept{
        3:   51:        return data == other.data;
        3:   51-block  0
call    0 returned 3
        -:   52:    }
        -:   53:
function _ZNK5StackIiEneERKS0_ called 3 returned 100% blocks executed 100%
        3:   54:    bool operator!= (const Stack<T>&other) const noexcept{
        3:   55:        return !(data == other.data);
        3:   55-block  0
call    0 returned 3
        -:   56:    }
        -:   57:
function _ZNK5StackIiEltERKS0_ called 1 returned 100% blocks executed 100%
        1:   58:    bool operator< (const Stack<T>&other) const noexcept{
        1:   59:        return data < other.data;
        1:   59-block  0
call    0 returned 1
        -:   60:    }
        -:   61:
function _ZNK5StackIiEgtERKS0_ called 1 returned 100% blocks executed 100%
        1:   62:    bool operator> (const Stack<T>&other) const noexcept{
        1:   63:        return data > other.data;
        1:   63-block  0
call    0 returned 1
        -:   64:    }
        -:   65:
function _ZNK5StackIiEleERKS0_ called 1 returned 100% blocks executed 100%
        1:   66:    bool operator<= (const Stack<T>&other) const noexcept{
        1:   67:        return data <= other.data;
        1:   67-block  0
call    0 returned 1
        -:   68:    }
        -:   69:
function _ZNK5StackIiEgeERKS0_ called 1 returned 100% blocks executed 100%
        1:   70:    bool operator>= (const Stack<T>&other) const noexcept{
        1:   71:        return data >= other.data;
        1:   71-block  0
call    0 returned 1
        -:   72:    }
        -:   73:
function _ZNK5StackIiEssERKS0_ called 2 returned 100% blocks executed 100%
        2:   74:    std::strong_ordering operator<=> (const Stack<T>&other) const noexcept{
        2:   75:        return data <=> other.data;
        2:   75-block  0
call    0 returned 2
        -:   76:    }
        -:   77:
        -:   78:};
        -:   79:
        -:   80:
        -:   81:
        -:   82:#endif //NUMBER_4_STACK_H
