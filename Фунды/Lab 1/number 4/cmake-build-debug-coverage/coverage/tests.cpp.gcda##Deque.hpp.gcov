        -:    0:Source:/mnt/d/Уник/4 сем/Фунды/number 4/include/Deque.hpp
        -:    0:Graph:/mnt/d/Уник/4 сем/Фунды/number 4/cmake-build-debug-coverage/CMakeFiles/tests.dir/tests/tests.cpp.gcno
        -:    0:Data:/mnt/d/Уник/4 сем/Фунды/number 4/cmake-build-debug-coverage/CMakeFiles/tests.dir/tests/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef NUMBER_4_DEQUE_HPP
        -:    2:#define NUMBER_4_DEQUE_HPP
        -:    3:
        -:    4:#include "List.hpp"
        -:    5:
        -:    6:namespace my_container {
        -:    7:
        -:    8:    template <typename T>
        -:    9:    class Deque : public List<T> {
        -:   10:    public:
        -:   11:        Deque();
        -:   12:        explicit Deque(const std::initializer_list<T> &init);
        -:   13:        Deque(const Deque<T> &other);
        -:   14:        Deque(Deque<T> &&other) noexcept;
        -:   15:
        -:   16:        Deque<T> &operator=(const Deque<T> &other);
        -:   17:        Deque<T> &operator=(Deque<T> &&other) noexcept;
        -:   18:        T &at(size_t pos);
        -:   19:        T &operator[](size_t pos);
        -:   20:    };
        -:   21:
        -:   22:    template <typename T>
function _ZN12my_container5DequeIiEaSEOS1_ called 1 returned 100% blocks executed 100%
        1:   23:    Deque<T> &Deque<T>::operator=(Deque<T> &&other) noexcept {
        1:   24:        if (this != &other) {
        1:   24-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   25:            List<T>::operator=(std::move(other));
        1:   25-block  0
call    0 returned 1
call    1 returned 1
        -:   26:        }
        1:   27:        return *this;
        1:   27-block  0
        -:   28:    }
        -:   29:
        -:   30:    template <typename T>
function _ZN12my_container5DequeIiEaSERKS1_ called 1 returned 100% blocks executed 100%
        1:   31:    Deque<T> &Deque<T>::operator=(const Deque<T> &other) {
        1:   32:        if (this != &other) {
        1:   32-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   33:            List<T>::operator=(other);
        1:   33-block  0
call    0 returned 1
        -:   34:        }
        1:   35:        return *this;
        1:   35-block  0
        -:   36:    }
        -:   37:
        -:   38:    template <typename T>
function _ZN12my_container5DequeIiEC2EOS1_ called 2 returned 100% blocks executed 100%
        2:   39:    Deque<T>::Deque(Deque<T> &&other) noexcept : List<T>(std::move(other)) {}
        2:   39-block  0
call    0 returned 2
call    1 returned 2
        -:   40:
        -:   41:    template <typename T>
function _ZN12my_container5DequeIiEC2ERKS1_ called 1 returned 100% blocks executed 100%
        1:   42:    Deque<T>::Deque(const Deque<T> &other) : List<T>(other) {}
        1:   42-block  0
call    0 returned 1
        -:   43:
        -:   44:    template <typename T>
function _ZN12my_container5DequeIiEC2ERKSt16initializer_listIiE called 9 returned 100% blocks executed 100%
        9:   45:    Deque<T>::Deque(const std::initializer_list<T> &init) : List<T>(init) {}
        9:   45-block  0
call    0 returned 9
        -:   46:
        -:   47:    template <typename T>
function _ZN12my_container5DequeIiEC2Ev called 4 returned 100% blocks executed 100%
        4:   48:    Deque<T>::Deque() : List<T>() {}
        4:   48-block  0
call    0 returned 4
        -:   49:
        -:   50:    template <typename T>
function _ZN12my_container5DequeIiEixEm called 9 returned 100% blocks executed 75%
        9:   51:    T &Deque<T>::operator[](size_t pos) {
        9:   52:        auto iter = this->begin();
        9:   52-block  0
call    0 returned 9
       9*:   53:        for (size_t i = 0; i < pos; ++i) {
        9:   53-block  0
branch  0 taken 0
branch  1 taken 9 (fallthrough)
    #####:   54:            ++iter;
    %%%%%:   54-block  0
call    0 never executed
        -:   55:        }
        9:   56:        return *iter;
        9:   56-block  0
call    0 returned 9
        -:   57:    }
        -:   58:
        -:   59:    template <typename T>
        -:   60:    T &Deque<T>::at(size_t pos) {
        -:   61:        if (pos >= this->size()) {
        -:   62:            throw std::out_of_range("At");
        -:   63:        }
        -:   64:        return (*this)[pos];
        -:   65:    }
        -:   66:
        -:   67:}
        -:   68:
        -:   69:#endif //NUMBER_4_DEQUE_HPP
